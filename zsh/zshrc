source ~/.zplug/init.zsh

zplug "plugins/extract", from:oh-my-zsh
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/gpg-agent", from:oh-my-zsh
zplug "zsh-users/zsh-history-substring-search"
zplug "plugins/history-substring-search", from:oh-my-zsh
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "geometry-zsh/geometry"

zplug "~/.dotfiles/zsh/autorun/", from:local

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi
zplug load

set -o vi
if zplug check zsh-users/zsh-history-substring-search; then
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
fi

# History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=10000

# History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data


# Case insensitive autocompletion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'

### C++ ###
# Use CCache when possible
[ -d "/usr/local/opt/ccache/libexec" ] && export PATH="/usr/local/opt/ccache/libexec:$PATH"
# Newer Bison version
[ -d "/usr/local/opt/bison/bin" ] && export PATH="/usr/local/opt/bison/bin:$PATH"
# Newer Flex version
[ -d "/usr/local/opt/flex/bin" ] && export PATH="/usr/local/opt/flex/bin:$PATH"
# Other LLVM tools (like clangd)
[ -d "/usr/local/opt/llvm/bin" ] && export PATH="$PATH:/usr/local/opt/llvm/bin"
# CMake output compile_commands.json
export CMAKE_EXPORT_COMPILE_COMMANDS=1
# CMake use Ninja by default
export CMAKE_GENERATOR="Ninja Multi-Config"

# Build directory
[ -d "$HOME/build" ] && export PATH="$HOME/build/bin:$PATH"
[ -d "$HOME/build" ] && export LD_LIBRARY_PATH="$HOME/build/lib:$LD_LIBRARY_PATH"

# Golang
[ -d "$HOME/build" ] && export GOPATH="$HOME/build"

# Rust
export PATH="$PATH:$HOME/.cargo/bin"

# MiniZinc
[ -d "/Applications/MiniZincIDE.app" ] && export PATH="$PATH:/Applications/MiniZincIDE.app/Contents/Resources"
export MARS="w-cah-640-4.infotech.monash.edu"
export MARS2="w-cah-640-3.infotech.monash.edu"
export MARS3="w-cah-640-2.infotech.monash.edu"
export BIGBAD="118.138.238.195"

# Neovim
export EDITOR="nvim"
alias edit="nvim"
alias vi="nvim"
alias ni="nvim"
alias vim="nvim"

# ls
if command -v exa &> /dev/null; then
  alias ls="exa"
  alias l="exa -la"
else
  alias l="ls -lah"
fi
# cat
if command -v bat &> /dev/null; then
  alias cat="bat"
  alias less="bat"
fi

# fzf - Command line fuzzy finder
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
if command -v fd &> /dev/null; then
  export FZF_DEFAULT_COMMAND='fd --type f'
fi

if command -v pazi &>/dev/null; then
  eval "$(pazi init zsh)"
fi

# PyEnv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# pipx
[ -d "$HOME/.local/bin" ] && export PATH="$HOME/.local/bin:$PATH"

